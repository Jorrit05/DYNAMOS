// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: rabbitMQ.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RabbitMQClient is the client API for RabbitMQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RabbitMQClient interface {
	InitRabbitMq(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitRabbitForChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopReceivingRabbit(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (RabbitMQ_ConsumeClient, error)
	ChainConsume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (RabbitMQ_ChainConsumeClient, error)
	SendRequestApproval(ctx context.Context, in *RequestApproval, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendValidationResponse(ctx context.Context, in *ValidationResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendCompositionRequest(ctx context.Context, in *CompositionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendSqlDataRequest(ctx context.Context, in *SqlDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendPolicyUpdate(ctx context.Context, in *PolicyUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendTest(ctx context.Context, in *SqlDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendMicroserviceComm(ctx context.Context, in *MicroserviceCommunication, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateQueue(ctx context.Context, in *QueueInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteQueue(ctx context.Context, in *QueueInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendRequestApprovalResponse(ctx context.Context, in *RequestApprovalResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendRequestApprovalRequest(ctx context.Context, in *RequestApproval, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rabbitMQClient struct {
	cc grpc.ClientConnInterface
}

func NewRabbitMQClient(cc grpc.ClientConnInterface) RabbitMQClient {
	return &rabbitMQClient{cc}
}

func (c *rabbitMQClient) InitRabbitMq(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/InitRabbitMq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) InitRabbitForChain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/InitRabbitForChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) StopReceivingRabbit(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/StopReceivingRabbit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (RabbitMQ_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RabbitMQ_ServiceDesc.Streams[0], "/dynamos.RabbitMQ/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &rabbitMQConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RabbitMQ_ConsumeClient interface {
	Recv() (*SideCarMessage, error)
	grpc.ClientStream
}

type rabbitMQConsumeClient struct {
	grpc.ClientStream
}

func (x *rabbitMQConsumeClient) Recv() (*SideCarMessage, error) {
	m := new(SideCarMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rabbitMQClient) ChainConsume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (RabbitMQ_ChainConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RabbitMQ_ServiceDesc.Streams[1], "/dynamos.RabbitMQ/ChainConsume", opts...)
	if err != nil {
		return nil, err
	}
	x := &rabbitMQChainConsumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RabbitMQ_ChainConsumeClient interface {
	Recv() (*SideCarMessage, error)
	grpc.ClientStream
}

type rabbitMQChainConsumeClient struct {
	grpc.ClientStream
}

func (x *rabbitMQChainConsumeClient) Recv() (*SideCarMessage, error) {
	m := new(SideCarMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rabbitMQClient) SendRequestApproval(ctx context.Context, in *RequestApproval, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendRequestApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendValidationResponse(ctx context.Context, in *ValidationResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendValidationResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendCompositionRequest(ctx context.Context, in *CompositionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendCompositionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendSqlDataRequest(ctx context.Context, in *SqlDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendSqlDataRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendPolicyUpdate(ctx context.Context, in *PolicyUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendPolicyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendTest(ctx context.Context, in *SqlDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendMicroserviceComm(ctx context.Context, in *MicroserviceCommunication, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendMicroserviceComm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) CreateQueue(ctx context.Context, in *QueueInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) DeleteQueue(ctx context.Context, in *QueueInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendRequestApprovalResponse(ctx context.Context, in *RequestApprovalResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendRequestApprovalResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitMQClient) SendRequestApprovalRequest(ctx context.Context, in *RequestApproval, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dynamos.RabbitMQ/SendRequestApprovalRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RabbitMQServer is the server API for RabbitMQ service.
// All implementations must embed UnimplementedRabbitMQServer
// for forward compatibility
type RabbitMQServer interface {
	InitRabbitMq(context.Context, *InitRequest) (*emptypb.Empty, error)
	InitRabbitForChain(context.Context, *ChainRequest) (*emptypb.Empty, error)
	StopReceivingRabbit(context.Context, *StopRequest) (*emptypb.Empty, error)
	Consume(*ConsumeRequest, RabbitMQ_ConsumeServer) error
	ChainConsume(*ConsumeRequest, RabbitMQ_ChainConsumeServer) error
	SendRequestApproval(context.Context, *RequestApproval) (*emptypb.Empty, error)
	SendValidationResponse(context.Context, *ValidationResponse) (*emptypb.Empty, error)
	SendCompositionRequest(context.Context, *CompositionRequest) (*emptypb.Empty, error)
	SendSqlDataRequest(context.Context, *SqlDataRequest) (*emptypb.Empty, error)
	SendPolicyUpdate(context.Context, *PolicyUpdate) (*emptypb.Empty, error)
	SendTest(context.Context, *SqlDataRequest) (*emptypb.Empty, error)
	SendMicroserviceComm(context.Context, *MicroserviceCommunication) (*emptypb.Empty, error)
	CreateQueue(context.Context, *QueueInfo) (*emptypb.Empty, error)
	DeleteQueue(context.Context, *QueueInfo) (*emptypb.Empty, error)
	SendRequestApprovalResponse(context.Context, *RequestApprovalResponse) (*emptypb.Empty, error)
	SendRequestApprovalRequest(context.Context, *RequestApproval) (*emptypb.Empty, error)
	mustEmbedUnimplementedRabbitMQServer()
}

// UnimplementedRabbitMQServer must be embedded to have forward compatible implementations.
type UnimplementedRabbitMQServer struct {
}

func (UnimplementedRabbitMQServer) InitRabbitMq(context.Context, *InitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitRabbitMq not implemented")
}
func (UnimplementedRabbitMQServer) InitRabbitForChain(context.Context, *ChainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitRabbitForChain not implemented")
}
func (UnimplementedRabbitMQServer) StopReceivingRabbit(context.Context, *StopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReceivingRabbit not implemented")
}
func (UnimplementedRabbitMQServer) Consume(*ConsumeRequest, RabbitMQ_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedRabbitMQServer) ChainConsume(*ConsumeRequest, RabbitMQ_ChainConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method ChainConsume not implemented")
}
func (UnimplementedRabbitMQServer) SendRequestApproval(context.Context, *RequestApproval) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestApproval not implemented")
}
func (UnimplementedRabbitMQServer) SendValidationResponse(context.Context, *ValidationResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendValidationResponse not implemented")
}
func (UnimplementedRabbitMQServer) SendCompositionRequest(context.Context, *CompositionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCompositionRequest not implemented")
}
func (UnimplementedRabbitMQServer) SendSqlDataRequest(context.Context, *SqlDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSqlDataRequest not implemented")
}
func (UnimplementedRabbitMQServer) SendPolicyUpdate(context.Context, *PolicyUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPolicyUpdate not implemented")
}
func (UnimplementedRabbitMQServer) SendTest(context.Context, *SqlDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTest not implemented")
}
func (UnimplementedRabbitMQServer) SendMicroserviceComm(context.Context, *MicroserviceCommunication) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMicroserviceComm not implemented")
}
func (UnimplementedRabbitMQServer) CreateQueue(context.Context, *QueueInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedRabbitMQServer) DeleteQueue(context.Context, *QueueInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedRabbitMQServer) SendRequestApprovalResponse(context.Context, *RequestApprovalResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestApprovalResponse not implemented")
}
func (UnimplementedRabbitMQServer) SendRequestApprovalRequest(context.Context, *RequestApproval) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestApprovalRequest not implemented")
}
func (UnimplementedRabbitMQServer) mustEmbedUnimplementedRabbitMQServer() {}

// UnsafeRabbitMQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RabbitMQServer will
// result in compilation errors.
type UnsafeRabbitMQServer interface {
	mustEmbedUnimplementedRabbitMQServer()
}

func RegisterRabbitMQServer(s grpc.ServiceRegistrar, srv RabbitMQServer) {
	s.RegisterService(&RabbitMQ_ServiceDesc, srv)
}

func _RabbitMQ_InitRabbitMq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).InitRabbitMq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/InitRabbitMq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).InitRabbitMq(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_InitRabbitForChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).InitRabbitForChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/InitRabbitForChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).InitRabbitForChain(ctx, req.(*ChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_StopReceivingRabbit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).StopReceivingRabbit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/StopReceivingRabbit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).StopReceivingRabbit(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RabbitMQServer).Consume(m, &rabbitMQConsumeServer{stream})
}

type RabbitMQ_ConsumeServer interface {
	Send(*SideCarMessage) error
	grpc.ServerStream
}

type rabbitMQConsumeServer struct {
	grpc.ServerStream
}

func (x *rabbitMQConsumeServer) Send(m *SideCarMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _RabbitMQ_ChainConsume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RabbitMQServer).ChainConsume(m, &rabbitMQChainConsumeServer{stream})
}

type RabbitMQ_ChainConsumeServer interface {
	Send(*SideCarMessage) error
	grpc.ServerStream
}

type rabbitMQChainConsumeServer struct {
	grpc.ServerStream
}

func (x *rabbitMQChainConsumeServer) Send(m *SideCarMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _RabbitMQ_SendRequestApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestApproval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendRequestApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendRequestApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendRequestApproval(ctx, req.(*RequestApproval))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendValidationResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendValidationResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendValidationResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendValidationResponse(ctx, req.(*ValidationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendCompositionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendCompositionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendCompositionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendCompositionRequest(ctx, req.(*CompositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendSqlDataRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendSqlDataRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendSqlDataRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendSqlDataRequest(ctx, req.(*SqlDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendPolicyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendPolicyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendPolicyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendPolicyUpdate(ctx, req.(*PolicyUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendTest(ctx, req.(*SqlDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendMicroserviceComm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MicroserviceCommunication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendMicroserviceComm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendMicroserviceComm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendMicroserviceComm(ctx, req.(*MicroserviceCommunication))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).CreateQueue(ctx, req.(*QueueInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).DeleteQueue(ctx, req.(*QueueInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendRequestApprovalResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestApprovalResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendRequestApprovalResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendRequestApprovalResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendRequestApprovalResponse(ctx, req.(*RequestApprovalResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _RabbitMQ_SendRequestApprovalRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestApproval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RabbitMQServer).SendRequestApprovalRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamos.RabbitMQ/SendRequestApprovalRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RabbitMQServer).SendRequestApprovalRequest(ctx, req.(*RequestApproval))
	}
	return interceptor(ctx, in, info, handler)
}

// RabbitMQ_ServiceDesc is the grpc.ServiceDesc for RabbitMQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RabbitMQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynamos.RabbitMQ",
	HandlerType: (*RabbitMQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitRabbitMq",
			Handler:    _RabbitMQ_InitRabbitMq_Handler,
		},
		{
			MethodName: "InitRabbitForChain",
			Handler:    _RabbitMQ_InitRabbitForChain_Handler,
		},
		{
			MethodName: "StopReceivingRabbit",
			Handler:    _RabbitMQ_StopReceivingRabbit_Handler,
		},
		{
			MethodName: "SendRequestApproval",
			Handler:    _RabbitMQ_SendRequestApproval_Handler,
		},
		{
			MethodName: "SendValidationResponse",
			Handler:    _RabbitMQ_SendValidationResponse_Handler,
		},
		{
			MethodName: "SendCompositionRequest",
			Handler:    _RabbitMQ_SendCompositionRequest_Handler,
		},
		{
			MethodName: "SendSqlDataRequest",
			Handler:    _RabbitMQ_SendSqlDataRequest_Handler,
		},
		{
			MethodName: "SendPolicyUpdate",
			Handler:    _RabbitMQ_SendPolicyUpdate_Handler,
		},
		{
			MethodName: "SendTest",
			Handler:    _RabbitMQ_SendTest_Handler,
		},
		{
			MethodName: "SendMicroserviceComm",
			Handler:    _RabbitMQ_SendMicroserviceComm_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _RabbitMQ_CreateQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _RabbitMQ_DeleteQueue_Handler,
		},
		{
			MethodName: "SendRequestApprovalResponse",
			Handler:    _RabbitMQ_SendRequestApprovalResponse_Handler,
		},
		{
			MethodName: "SendRequestApprovalRequest",
			Handler:    _RabbitMQ_SendRequestApprovalRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _RabbitMQ_Consume_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChainConsume",
			Handler:       _RabbitMQ_ChainConsume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rabbitMQ.proto",
}
