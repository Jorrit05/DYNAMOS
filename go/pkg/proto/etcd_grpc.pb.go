// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: etcd.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EtcdClient is the client API for Etcd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtcdClient interface {
	InitEtcd(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetDatasetMetadata(ctx context.Context, in *EtcdKey, opts ...grpc.CallOption) (*Dataset, error)
}

type etcdClient struct {
	cc grpc.ClientConnInterface
}

func NewEtcdClient(cc grpc.ClientConnInterface) EtcdClient {
	return &etcdClient{cc}
}

func (c *etcdClient) InitEtcd(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Etcd/InitEtcd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *etcdClient) GetDatasetMetadata(ctx context.Context, in *EtcdKey, opts ...grpc.CallOption) (*Dataset, error) {
	out := new(Dataset)
	err := c.cc.Invoke(ctx, "/proto.Etcd/GetDatasetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtcdServer is the server API for Etcd service.
// All implementations must embed UnimplementedEtcdServer
// for forward compatibility
type EtcdServer interface {
	InitEtcd(context.Context, *empty.Empty) (*empty.Empty, error)
	GetDatasetMetadata(context.Context, *EtcdKey) (*Dataset, error)
	mustEmbedUnimplementedEtcdServer()
}

// UnimplementedEtcdServer must be embedded to have forward compatible implementations.
type UnimplementedEtcdServer struct {
}

func (UnimplementedEtcdServer) InitEtcd(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitEtcd not implemented")
}
func (UnimplementedEtcdServer) GetDatasetMetadata(context.Context, *EtcdKey) (*Dataset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetMetadata not implemented")
}
func (UnimplementedEtcdServer) mustEmbedUnimplementedEtcdServer() {}

// UnsafeEtcdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtcdServer will
// result in compilation errors.
type UnsafeEtcdServer interface {
	mustEmbedUnimplementedEtcdServer()
}

func RegisterEtcdServer(s grpc.ServiceRegistrar, srv EtcdServer) {
	s.RegisterService(&Etcd_ServiceDesc, srv)
}

func _Etcd_InitEtcd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdServer).InitEtcd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Etcd/InitEtcd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdServer).InitEtcd(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Etcd_GetDatasetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EtcdKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdServer).GetDatasetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Etcd/GetDatasetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdServer).GetDatasetMetadata(ctx, req.(*EtcdKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Etcd_ServiceDesc is the grpc.ServiceDesc for Etcd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Etcd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Etcd",
	HandlerType: (*EtcdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitEtcd",
			Handler:    _Etcd_InitEtcd_Handler,
		},
		{
			MethodName: "GetDatasetMetadata",
			Handler:    _Etcd_GetDatasetMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "etcd.proto",
}
