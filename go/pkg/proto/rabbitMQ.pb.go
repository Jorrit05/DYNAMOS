// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: rabbitMQ.proto

package proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName     string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	RoutingKey      string `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	QueueAutoDelete bool   `protobuf:"varint,3,opt,name=queue_auto_delete,json=queueAutoDelete,proto3" json:"queue_auto_delete,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{0}
}

func (x *InitRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *InitRequest) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *InitRequest) GetQueueAutoDelete() bool {
	if x != nil {
		return x.QueueAutoDelete
	}
	return false
}

type ChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName     string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	RoutingKey      string `protobuf:"bytes,2,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	QueueAutoDelete bool   `protobuf:"varint,3,opt,name=queue_auto_delete,json=queueAutoDelete,proto3" json:"queue_auto_delete,omitempty"`
	Port            uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ChainRequest) Reset() {
	*x = ChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainRequest) ProtoMessage() {}

func (x *ChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainRequest.ProtoReflect.Descriptor instead.
func (*ChainRequest) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{1}
}

func (x *ChainRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ChainRequest) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *ChainRequest) GetQueueAutoDelete() bool {
	if x != nil {
		return x.QueueAutoDelete
	}
	return false
}

func (x *ChainRequest) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{2}
}

type QueueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueName  string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	AutoDelete bool   `protobuf:"varint,2,opt,name=auto_delete,json=autoDelete,proto3" json:"auto_delete,omitempty"`
	UserName   string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	JobName    string `protobuf:"bytes,4,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *QueueInfo) Reset() {
	*x = QueueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueInfo) ProtoMessage() {}

func (x *QueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueInfo.ProtoReflect.Descriptor instead.
func (*QueueInfo) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{3}
}

func (x *QueueInfo) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *QueueInfo) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

func (x *QueueInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *QueueInfo) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

type ConsumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	AutoAck   bool   `protobuf:"varint,2,opt,name=auto_ack,json=autoAck,proto3" json:"auto_ack,omitempty"`
}

func (x *ConsumeRequest) Reset() {
	*x = ConsumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRequest) ProtoMessage() {}

func (x *ConsumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRequest.ProtoReflect.Descriptor instead.
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{4}
}

func (x *ConsumeRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *ConsumeRequest) GetAutoAck() bool {
	if x != nil {
		return x.AutoAck
	}
	return false
}

type SideCarMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Body   *any.Any          `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Traces map[string][]byte `protobuf:"bytes,3,rep,name=traces,proto3" json:"traces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Binary or textual representation of span context
}

func (x *SideCarMessage) Reset() {
	*x = SideCarMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SideCarMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideCarMessage) ProtoMessage() {}

func (x *SideCarMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideCarMessage.ProtoReflect.Descriptor instead.
func (*SideCarMessage) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{5}
}

func (x *SideCarMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SideCarMessage) GetBody() *any.Any {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *SideCarMessage) GetTraces() map[string][]byte {
	if x != nil {
		return x.Traces
	}
	return nil
}

type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{6}
}

func (x *Auth) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Auth) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type DataProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archetypes       []string `protobuf:"bytes,1,rep,name=archetypes,proto3" json:"archetypes,omitempty"`
	ComputeProviders []string `protobuf:"bytes,2,rep,name=compute_providers,json=computeProviders,proto3" json:"compute_providers,omitempty"`
}

func (x *DataProvider) Reset() {
	*x = DataProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataProvider) ProtoMessage() {}

func (x *DataProvider) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataProvider.ProtoReflect.Descriptor instead.
func (*DataProvider) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{7}
}

func (x *DataProvider) GetArchetypes() []string {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

func (x *DataProvider) GetComputeProviders() []string {
	if x != nil {
		return x.ComputeProviders
	}
	return nil
}

type UserAllowedArchetypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archetypes []string `protobuf:"bytes,1,rep,name=archetypes,proto3" json:"archetypes,omitempty"`
}

func (x *UserAllowedArchetypes) Reset() {
	*x = UserAllowedArchetypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAllowedArchetypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAllowedArchetypes) ProtoMessage() {}

func (x *UserAllowedArchetypes) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAllowedArchetypes.ProtoReflect.Descriptor instead.
func (*UserAllowedArchetypes) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{8}
}

func (x *UserAllowedArchetypes) GetArchetypes() []string {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

type UserArchetypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName   string                            `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Archetypes map[string]*UserAllowedArchetypes `protobuf:"bytes,2,rep,name=archetypes,proto3" json:"archetypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserArchetypes) Reset() {
	*x = UserArchetypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserArchetypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserArchetypes) ProtoMessage() {}

func (x *UserArchetypes) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserArchetypes.ProtoReflect.Descriptor instead.
func (*UserArchetypes) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{9}
}

func (x *UserArchetypes) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserArchetypes) GetArchetypes() map[string]*UserAllowedArchetypes {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

type ValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RequestType          string                   `protobuf:"bytes,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	ValidDataproviders   map[string]*DataProvider `protobuf:"bytes,3,rep,name=valid_dataproviders,json=validDataproviders,proto3" json:"valid_dataproviders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InvalidDataproviders []string                 `protobuf:"bytes,4,rep,name=invalid_dataproviders,json=invalidDataproviders,proto3" json:"invalid_dataproviders,omitempty"`
	Auth                 *Auth                    `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	User                 *User                    `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	RequestApproved      bool                     `protobuf:"varint,7,opt,name=request_approved,json=requestApproved,proto3" json:"request_approved,omitempty"`
	ValidArchetypes      *UserArchetypes          `protobuf:"bytes,8,opt,name=valid_archetypes,json=validArchetypes,proto3" json:"valid_archetypes,omitempty"`
	Options              map[string]bool          `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ValidationResponse) Reset() {
	*x = ValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResponse) ProtoMessage() {}

func (x *ValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResponse.ProtoReflect.Descriptor instead.
func (*ValidationResponse) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{10}
}

func (x *ValidationResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ValidationResponse) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *ValidationResponse) GetValidDataproviders() map[string]*DataProvider {
	if x != nil {
		return x.ValidDataproviders
	}
	return nil
}

func (x *ValidationResponse) GetInvalidDataproviders() []string {
	if x != nil {
		return x.InvalidDataproviders
	}
	return nil
}

func (x *ValidationResponse) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *ValidationResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ValidationResponse) GetRequestApproved() bool {
	if x != nil {
		return x.RequestApproved
	}
	return false
}

func (x *ValidationResponse) GetValidArchetypes() *UserArchetypes {
	if x != nil {
		return x.ValidArchetypes
	}
	return nil
}

func (x *ValidationResponse) GetOptions() map[string]bool {
	if x != nil {
		return x.Options
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{11}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type RequestApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` //RequestApproval
	User             *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	DataProviders    []string        `protobuf:"bytes,3,rep,name=data_providers,json=dataProviders,proto3" json:"data_providers,omitempty"`
	DestinationQueue string          `protobuf:"bytes,4,opt,name=destination_queue,json=destinationQueue,proto3" json:"destination_queue,omitempty"`
	Options          map[string]bool `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RequestApproval) Reset() {
	*x = RequestApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestApproval) ProtoMessage() {}

func (x *RequestApproval) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestApproval.ProtoReflect.Descriptor instead.
func (*RequestApproval) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{12}
}

func (x *RequestApproval) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestApproval) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RequestApproval) GetDataProviders() []string {
	if x != nil {
		return x.DataProviders
	}
	return nil
}

func (x *RequestApproval) GetDestinationQueue() string {
	if x != nil {
		return x.DestinationQueue
	}
	return ""
}

func (x *RequestApproval) GetOptions() map[string]bool {
	if x != nil {
		return x.Options
	}
	return nil
}

type RequestApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	User                *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Auth                *Auth             `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	AuthorizedProviders map[string]string `protobuf:"bytes,4,rep,name=authorized_providers,json=authorizedProviders,proto3" json:"authorized_providers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	JobId               string            `protobuf:"bytes,5,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Error               string            `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	RequestMetadata     *RequestMetadata  `protobuf:"bytes,7,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
}

func (x *RequestApprovalResponse) Reset() {
	*x = RequestApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestApprovalResponse) ProtoMessage() {}

func (x *RequestApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestApprovalResponse.ProtoReflect.Descriptor instead.
func (*RequestApprovalResponse) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{13}
}

func (x *RequestApprovalResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestApprovalResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RequestApprovalResponse) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RequestApprovalResponse) GetAuthorizedProviders() map[string]string {
	if x != nil {
		return x.AuthorizedProviders
	}
	return nil
}

func (x *RequestApprovalResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *RequestApprovalResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RequestApprovalResponse) GetRequestMetadata() *RequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

type PolicyUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	User               *User               `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	DataProviders      []string            `protobuf:"bytes,3,rep,name=data_providers,json=dataProviders,proto3" json:"data_providers,omitempty"`
	RequestMetadata    *RequestMetadata    `protobuf:"bytes,4,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	ValidationResponse *ValidationResponse `protobuf:"bytes,5,opt,name=validation_response,json=validationResponse,proto3" json:"validation_response,omitempty"`
}

func (x *PolicyUpdate) Reset() {
	*x = PolicyUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyUpdate) ProtoMessage() {}

func (x *PolicyUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyUpdate.ProtoReflect.Descriptor instead.
func (*PolicyUpdate) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{14}
}

func (x *PolicyUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PolicyUpdate) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PolicyUpdate) GetDataProviders() []string {
	if x != nil {
		return x.DataProviders
	}
	return nil
}

func (x *PolicyUpdate) GetRequestMetadata() *RequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *PolicyUpdate) GetValidationResponse() *ValidationResponse {
	if x != nil {
		return x.ValidationResponse
	}
	return nil
}

type CompositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchetypeId      string   `protobuf:"bytes,1,opt,name=archetype_id,json=archetypeId,proto3" json:"archetype_id,omitempty"`
	RequestType      string   `protobuf:"bytes,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	Role             string   `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	User             *User    `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	DataProviders    []string `protobuf:"bytes,5,rep,name=data_providers,json=dataProviders,proto3" json:"data_providers,omitempty"`
	DestinationQueue string   `protobuf:"bytes,6,opt,name=destination_queue,json=destinationQueue,proto3" json:"destination_queue,omitempty"`
	JobName          string   `protobuf:"bytes,7,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	LocalJobName     string   `protobuf:"bytes,8,opt,name=local_job_name,json=localJobName,proto3" json:"local_job_name,omitempty"` // for saving the generated local job name with this composition request
}

func (x *CompositionRequest) Reset() {
	*x = CompositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionRequest) ProtoMessage() {}

func (x *CompositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionRequest.ProtoReflect.Descriptor instead.
func (*CompositionRequest) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{15}
}

func (x *CompositionRequest) GetArchetypeId() string {
	if x != nil {
		return x.ArchetypeId
	}
	return ""
}

func (x *CompositionRequest) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *CompositionRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CompositionRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CompositionRequest) GetDataProviders() []string {
	if x != nil {
		return x.DataProviders
	}
	return nil
}

func (x *CompositionRequest) GetDestinationQueue() string {
	if x != nil {
		return x.DestinationQueue
	}
	return ""
}

func (x *CompositionRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *CompositionRequest) GetLocalJobName() string {
	if x != nil {
		return x.LocalJobName
	}
	return ""
}

type SqlDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Query            string            `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Algorithm        string            `protobuf:"bytes,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	AlgorithmColumns map[string]string `protobuf:"bytes,4,rep,name=algorithm_columns,json=algorithmColumns,proto3" json:"algorithm_columns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	User             *User             `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	RequestMetadata  *RequestMetadata  `protobuf:"bytes,6,opt,name=request_metadata,json=requestMetadata,proto3" json:"request_metadata,omitempty"`
	Options          map[string]bool   `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SqlDataRequest) Reset() {
	*x = SqlDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rabbitMQ_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDataRequest) ProtoMessage() {}

func (x *SqlDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitMQ_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDataRequest.ProtoReflect.Descriptor instead.
func (*SqlDataRequest) Descriptor() ([]byte, []int) {
	return file_rabbitMQ_proto_rawDescGZIP(), []int{16}
}

func (x *SqlDataRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SqlDataRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SqlDataRequest) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *SqlDataRequest) GetAlgorithmColumns() map[string]string {
	if x != nil {
		return x.AlgorithmColumns
	}
	return nil
}

func (x *SqlDataRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SqlDataRequest) GetRequestMetadata() *RequestMetadata {
	if x != nil {
		return x.RequestMetadata
	}
	return nil
}

func (x *SqlDataRequest) GetOptions() map[string]bool {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_rabbitMQ_proto protoreflect.FileDescriptor

var file_rabbitMQ_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7d, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x6f, 0x41, 0x63, 0x6b, 0x22, 0xc6, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x64, 0x65, 0x43,
	0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x43, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4e, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x5b, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0x37, 0x0a, 0x15,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x5d,
	0x0a, 0x0f, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x04,
	0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x5c, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99,
	0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x03, 0x0a, 0x17, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x12, 0x6c, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x46, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xff, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x5a,
	0x0a, 0x11, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x73, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x53, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0x96, 0x09, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x51,
	0x12, 0x3e, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x71,
	0x12, 0x14, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x14,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x43, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x44, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x17, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x43, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x73, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x22, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x12, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1a, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x27, 0x5a, 0x25,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x6f, 0x72, 0x72, 0x69,
	0x74, 0x30, 0x35, 0x2f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x4f, 0x53, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rabbitMQ_proto_rawDescOnce sync.Once
	file_rabbitMQ_proto_rawDescData = file_rabbitMQ_proto_rawDesc
)

func file_rabbitMQ_proto_rawDescGZIP() []byte {
	file_rabbitMQ_proto_rawDescOnce.Do(func() {
		file_rabbitMQ_proto_rawDescData = protoimpl.X.CompressGZIP(file_rabbitMQ_proto_rawDescData)
	})
	return file_rabbitMQ_proto_rawDescData
}

var file_rabbitMQ_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_rabbitMQ_proto_goTypes = []interface{}{
	(*InitRequest)(nil),               // 0: dynamos.InitRequest
	(*ChainRequest)(nil),              // 1: dynamos.ChainRequest
	(*StopRequest)(nil),               // 2: dynamos.StopRequest
	(*QueueInfo)(nil),                 // 3: dynamos.QueueInfo
	(*ConsumeRequest)(nil),            // 4: dynamos.ConsumeRequest
	(*SideCarMessage)(nil),            // 5: dynamos.SideCarMessage
	(*Auth)(nil),                      // 6: dynamos.Auth
	(*DataProvider)(nil),              // 7: dynamos.DataProvider
	(*UserAllowedArchetypes)(nil),     // 8: dynamos.UserAllowedArchetypes
	(*UserArchetypes)(nil),            // 9: dynamos.UserArchetypes
	(*ValidationResponse)(nil),        // 10: dynamos.ValidationResponse
	(*User)(nil),                      // 11: dynamos.User
	(*RequestApproval)(nil),           // 12: dynamos.RequestApproval
	(*RequestApprovalResponse)(nil),   // 13: dynamos.RequestApprovalResponse
	(*PolicyUpdate)(nil),              // 14: dynamos.PolicyUpdate
	(*CompositionRequest)(nil),        // 15: dynamos.CompositionRequest
	(*SqlDataRequest)(nil),            // 16: dynamos.SqlDataRequest
	nil,                               // 17: dynamos.SideCarMessage.TracesEntry
	nil,                               // 18: dynamos.UserArchetypes.ArchetypesEntry
	nil,                               // 19: dynamos.ValidationResponse.ValidDataprovidersEntry
	nil,                               // 20: dynamos.ValidationResponse.OptionsEntry
	nil,                               // 21: dynamos.RequestApproval.OptionsEntry
	nil,                               // 22: dynamos.RequestApprovalResponse.AuthorizedProvidersEntry
	nil,                               // 23: dynamos.SqlDataRequest.AlgorithmColumnsEntry
	nil,                               // 24: dynamos.SqlDataRequest.OptionsEntry
	(*any.Any)(nil),                   // 25: google.protobuf.Any
	(*RequestMetadata)(nil),           // 26: dynamos.RequestMetadata
	(*MicroserviceCommunication)(nil), // 27: dynamos.MicroserviceCommunication
	(*empty.Empty)(nil),               // 28: google.protobuf.Empty
}
var file_rabbitMQ_proto_depIdxs = []int32{
	25, // 0: dynamos.SideCarMessage.body:type_name -> google.protobuf.Any
	17, // 1: dynamos.SideCarMessage.traces:type_name -> dynamos.SideCarMessage.TracesEntry
	18, // 2: dynamos.UserArchetypes.archetypes:type_name -> dynamos.UserArchetypes.ArchetypesEntry
	19, // 3: dynamos.ValidationResponse.valid_dataproviders:type_name -> dynamos.ValidationResponse.ValidDataprovidersEntry
	6,  // 4: dynamos.ValidationResponse.auth:type_name -> dynamos.Auth
	11, // 5: dynamos.ValidationResponse.user:type_name -> dynamos.User
	9,  // 6: dynamos.ValidationResponse.valid_archetypes:type_name -> dynamos.UserArchetypes
	20, // 7: dynamos.ValidationResponse.options:type_name -> dynamos.ValidationResponse.OptionsEntry
	11, // 8: dynamos.RequestApproval.user:type_name -> dynamos.User
	21, // 9: dynamos.RequestApproval.options:type_name -> dynamos.RequestApproval.OptionsEntry
	11, // 10: dynamos.RequestApprovalResponse.user:type_name -> dynamos.User
	6,  // 11: dynamos.RequestApprovalResponse.auth:type_name -> dynamos.Auth
	22, // 12: dynamos.RequestApprovalResponse.authorized_providers:type_name -> dynamos.RequestApprovalResponse.AuthorizedProvidersEntry
	26, // 13: dynamos.RequestApprovalResponse.request_metadata:type_name -> dynamos.RequestMetadata
	11, // 14: dynamos.PolicyUpdate.user:type_name -> dynamos.User
	26, // 15: dynamos.PolicyUpdate.request_metadata:type_name -> dynamos.RequestMetadata
	10, // 16: dynamos.PolicyUpdate.validation_response:type_name -> dynamos.ValidationResponse
	11, // 17: dynamos.CompositionRequest.user:type_name -> dynamos.User
	23, // 18: dynamos.SqlDataRequest.algorithm_columns:type_name -> dynamos.SqlDataRequest.AlgorithmColumnsEntry
	11, // 19: dynamos.SqlDataRequest.user:type_name -> dynamos.User
	26, // 20: dynamos.SqlDataRequest.request_metadata:type_name -> dynamos.RequestMetadata
	24, // 21: dynamos.SqlDataRequest.options:type_name -> dynamos.SqlDataRequest.OptionsEntry
	8,  // 22: dynamos.UserArchetypes.ArchetypesEntry.value:type_name -> dynamos.UserAllowedArchetypes
	7,  // 23: dynamos.ValidationResponse.ValidDataprovidersEntry.value:type_name -> dynamos.DataProvider
	0,  // 24: dynamos.RabbitMQ.InitRabbitMq:input_type -> dynamos.InitRequest
	1,  // 25: dynamos.RabbitMQ.InitRabbitForChain:input_type -> dynamos.ChainRequest
	2,  // 26: dynamos.RabbitMQ.StopReceivingRabbit:input_type -> dynamos.StopRequest
	4,  // 27: dynamos.RabbitMQ.Consume:input_type -> dynamos.ConsumeRequest
	4,  // 28: dynamos.RabbitMQ.ChainConsume:input_type -> dynamos.ConsumeRequest
	12, // 29: dynamos.RabbitMQ.SendRequestApproval:input_type -> dynamos.RequestApproval
	10, // 30: dynamos.RabbitMQ.SendValidationResponse:input_type -> dynamos.ValidationResponse
	15, // 31: dynamos.RabbitMQ.SendCompositionRequest:input_type -> dynamos.CompositionRequest
	16, // 32: dynamos.RabbitMQ.SendSqlDataRequest:input_type -> dynamos.SqlDataRequest
	14, // 33: dynamos.RabbitMQ.SendPolicyUpdate:input_type -> dynamos.PolicyUpdate
	16, // 34: dynamos.RabbitMQ.SendTest:input_type -> dynamos.SqlDataRequest
	27, // 35: dynamos.RabbitMQ.SendMicroserviceComm:input_type -> dynamos.MicroserviceCommunication
	3,  // 36: dynamos.RabbitMQ.CreateQueue:input_type -> dynamos.QueueInfo
	3,  // 37: dynamos.RabbitMQ.DeleteQueue:input_type -> dynamos.QueueInfo
	13, // 38: dynamos.RabbitMQ.SendRequestApprovalResponse:input_type -> dynamos.RequestApprovalResponse
	12, // 39: dynamos.RabbitMQ.SendRequestApprovalRequest:input_type -> dynamos.RequestApproval
	28, // 40: dynamos.RabbitMQ.InitRabbitMq:output_type -> google.protobuf.Empty
	28, // 41: dynamos.RabbitMQ.InitRabbitForChain:output_type -> google.protobuf.Empty
	28, // 42: dynamos.RabbitMQ.StopReceivingRabbit:output_type -> google.protobuf.Empty
	5,  // 43: dynamos.RabbitMQ.Consume:output_type -> dynamos.SideCarMessage
	5,  // 44: dynamos.RabbitMQ.ChainConsume:output_type -> dynamos.SideCarMessage
	28, // 45: dynamos.RabbitMQ.SendRequestApproval:output_type -> google.protobuf.Empty
	28, // 46: dynamos.RabbitMQ.SendValidationResponse:output_type -> google.protobuf.Empty
	28, // 47: dynamos.RabbitMQ.SendCompositionRequest:output_type -> google.protobuf.Empty
	28, // 48: dynamos.RabbitMQ.SendSqlDataRequest:output_type -> google.protobuf.Empty
	28, // 49: dynamos.RabbitMQ.SendPolicyUpdate:output_type -> google.protobuf.Empty
	28, // 50: dynamos.RabbitMQ.SendTest:output_type -> google.protobuf.Empty
	28, // 51: dynamos.RabbitMQ.SendMicroserviceComm:output_type -> google.protobuf.Empty
	28, // 52: dynamos.RabbitMQ.CreateQueue:output_type -> google.protobuf.Empty
	28, // 53: dynamos.RabbitMQ.DeleteQueue:output_type -> google.protobuf.Empty
	28, // 54: dynamos.RabbitMQ.SendRequestApprovalResponse:output_type -> google.protobuf.Empty
	28, // 55: dynamos.RabbitMQ.SendRequestApprovalRequest:output_type -> google.protobuf.Empty
	40, // [40:56] is the sub-list for method output_type
	24, // [24:40] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_rabbitMQ_proto_init() }
func file_rabbitMQ_proto_init() {
	if File_rabbitMQ_proto != nil {
		return
	}
	file_generic_proto_init()
	file_microserviceCommunication_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rabbitMQ_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SideCarMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAllowedArchetypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserArchetypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rabbitMQ_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rabbitMQ_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rabbitMQ_proto_goTypes,
		DependencyIndexes: file_rabbitMQ_proto_depIdxs,
		MessageInfos:      file_rabbitMQ_proto_msgTypes,
	}.Build()
	File_rabbitMQ_proto = out.File
	file_rabbitMQ_proto_rawDesc = nil
	file_rabbitMQ_proto_goTypes = nil
	file_rabbitMQ_proto_depIdxs = nil
}
