# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import microserviceCommunication_pb2 as microserviceCommunication__pb2
import rabbitMQ_pb2 as rabbitMQ__pb2


class RabbitMQStub(object):
    """RPC calls for RabbitMQ.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitRabbitMq = channel.unary_unary(
                '/dynamos.RabbitMQ/InitRabbitMq',
                request_serializer=rabbitMQ__pb2.InitRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.InitRabbitForChain = channel.unary_unary(
                '/dynamos.RabbitMQ/InitRabbitForChain',
                request_serializer=rabbitMQ__pb2.ChainRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.StopReceivingRabbit = channel.unary_unary(
                '/dynamos.RabbitMQ/StopReceivingRabbit',
                request_serializer=rabbitMQ__pb2.StopRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Consume = channel.unary_stream(
                '/dynamos.RabbitMQ/Consume',
                request_serializer=rabbitMQ__pb2.ConsumeRequest.SerializeToString,
                response_deserializer=rabbitMQ__pb2.SideCarMessage.FromString,
                )
        self.ChainConsume = channel.unary_stream(
                '/dynamos.RabbitMQ/ChainConsume',
                request_serializer=rabbitMQ__pb2.ConsumeRequest.SerializeToString,
                response_deserializer=rabbitMQ__pb2.SideCarMessage.FromString,
                )
        self.SendRequestApproval = channel.unary_unary(
                '/dynamos.RabbitMQ/SendRequestApproval',
                request_serializer=rabbitMQ__pb2.RequestApproval.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendValidationResponse = channel.unary_unary(
                '/dynamos.RabbitMQ/SendValidationResponse',
                request_serializer=rabbitMQ__pb2.ValidationResponse.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendCompositionRequest = channel.unary_unary(
                '/dynamos.RabbitMQ/SendCompositionRequest',
                request_serializer=rabbitMQ__pb2.CompositionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendSqlDataRequest = channel.unary_unary(
                '/dynamos.RabbitMQ/SendSqlDataRequest',
                request_serializer=rabbitMQ__pb2.SqlDataRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendPolicyUpdate = channel.unary_unary(
                '/dynamos.RabbitMQ/SendPolicyUpdate',
                request_serializer=rabbitMQ__pb2.PolicyUpdate.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendTest = channel.unary_unary(
                '/dynamos.RabbitMQ/SendTest',
                request_serializer=rabbitMQ__pb2.SqlDataRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendMicroserviceComm = channel.unary_unary(
                '/dynamos.RabbitMQ/SendMicroserviceComm',
                request_serializer=microserviceCommunication__pb2.MicroserviceCommunication.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CreateQueue = channel.unary_unary(
                '/dynamos.RabbitMQ/CreateQueue',
                request_serializer=rabbitMQ__pb2.QueueInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DeleteQueue = channel.unary_unary(
                '/dynamos.RabbitMQ/DeleteQueue',
                request_serializer=rabbitMQ__pb2.QueueInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendRequestApprovalResponse = channel.unary_unary(
                '/dynamos.RabbitMQ/SendRequestApprovalResponse',
                request_serializer=rabbitMQ__pb2.RequestApprovalResponse.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.SendRequestApprovalRequest = channel.unary_unary(
                '/dynamos.RabbitMQ/SendRequestApprovalRequest',
                request_serializer=rabbitMQ__pb2.RequestApproval.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class RabbitMQServicer(object):
    """RPC calls for RabbitMQ.
    """

    def InitRabbitMq(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitRabbitForChain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopReceivingRabbit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Consume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChainConsume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRequestApproval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendValidationResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendCompositionRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSqlDataRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPolicyUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMicroserviceComm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRequestApprovalResponse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRequestApprovalRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RabbitMQServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitRabbitMq': grpc.unary_unary_rpc_method_handler(
                    servicer.InitRabbitMq,
                    request_deserializer=rabbitMQ__pb2.InitRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'InitRabbitForChain': grpc.unary_unary_rpc_method_handler(
                    servicer.InitRabbitForChain,
                    request_deserializer=rabbitMQ__pb2.ChainRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'StopReceivingRabbit': grpc.unary_unary_rpc_method_handler(
                    servicer.StopReceivingRabbit,
                    request_deserializer=rabbitMQ__pb2.StopRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Consume': grpc.unary_stream_rpc_method_handler(
                    servicer.Consume,
                    request_deserializer=rabbitMQ__pb2.ConsumeRequest.FromString,
                    response_serializer=rabbitMQ__pb2.SideCarMessage.SerializeToString,
            ),
            'ChainConsume': grpc.unary_stream_rpc_method_handler(
                    servicer.ChainConsume,
                    request_deserializer=rabbitMQ__pb2.ConsumeRequest.FromString,
                    response_serializer=rabbitMQ__pb2.SideCarMessage.SerializeToString,
            ),
            'SendRequestApproval': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRequestApproval,
                    request_deserializer=rabbitMQ__pb2.RequestApproval.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendValidationResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.SendValidationResponse,
                    request_deserializer=rabbitMQ__pb2.ValidationResponse.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendCompositionRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCompositionRequest,
                    request_deserializer=rabbitMQ__pb2.CompositionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendSqlDataRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSqlDataRequest,
                    request_deserializer=rabbitMQ__pb2.SqlDataRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendPolicyUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPolicyUpdate,
                    request_deserializer=rabbitMQ__pb2.PolicyUpdate.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTest,
                    request_deserializer=rabbitMQ__pb2.SqlDataRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendMicroserviceComm': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMicroserviceComm,
                    request_deserializer=microserviceCommunication__pb2.MicroserviceCommunication.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQueue,
                    request_deserializer=rabbitMQ__pb2.QueueInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQueue,
                    request_deserializer=rabbitMQ__pb2.QueueInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendRequestApprovalResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRequestApprovalResponse,
                    request_deserializer=rabbitMQ__pb2.RequestApprovalResponse.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SendRequestApprovalRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRequestApprovalRequest,
                    request_deserializer=rabbitMQ__pb2.RequestApproval.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dynamos.RabbitMQ', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RabbitMQ(object):
    """RPC calls for RabbitMQ.
    """

    @staticmethod
    def InitRabbitMq(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/InitRabbitMq',
            rabbitMQ__pb2.InitRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitRabbitForChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/InitRabbitForChain',
            rabbitMQ__pb2.ChainRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopReceivingRabbit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/StopReceivingRabbit',
            rabbitMQ__pb2.StopRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Consume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dynamos.RabbitMQ/Consume',
            rabbitMQ__pb2.ConsumeRequest.SerializeToString,
            rabbitMQ__pb2.SideCarMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChainConsume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/dynamos.RabbitMQ/ChainConsume',
            rabbitMQ__pb2.ConsumeRequest.SerializeToString,
            rabbitMQ__pb2.SideCarMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendRequestApproval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendRequestApproval',
            rabbitMQ__pb2.RequestApproval.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendValidationResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendValidationResponse',
            rabbitMQ__pb2.ValidationResponse.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendCompositionRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendCompositionRequest',
            rabbitMQ__pb2.CompositionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSqlDataRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendSqlDataRequest',
            rabbitMQ__pb2.SqlDataRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPolicyUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendPolicyUpdate',
            rabbitMQ__pb2.PolicyUpdate.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendTest',
            rabbitMQ__pb2.SqlDataRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMicroserviceComm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendMicroserviceComm',
            microserviceCommunication__pb2.MicroserviceCommunication.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/CreateQueue',
            rabbitMQ__pb2.QueueInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/DeleteQueue',
            rabbitMQ__pb2.QueueInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendRequestApprovalResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendRequestApprovalResponse',
            rabbitMQ__pb2.RequestApprovalResponse.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendRequestApprovalRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dynamos.RabbitMQ/SendRequestApprovalRequest',
            rabbitMQ__pb2.RequestApproval.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
