---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "/entrypoint/entrypoint.sh"]
          ports:
            - containerPort: 3000
          env:
            - name: RESTART_
              value: "now"
            - name: GF_PATHS_PROVISIONING
              value: "/etc/grafana/provisioning"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Admin"
            - name: GF_SERVER_ROOT_URL
              value: "http://localhost:30001/grafana/"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"

            # - name: GF_SERVER_ROOT_URL
            #   value: "http://localhost:80/grafana"
            # - name: GF_SERVER_SERVE_FROM_SUB_PATH
            #   value: "true"

          volumeMounts:
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-entrypoint
              mountPath: /entrypoint
      volumes:
        - name: grafana-dashboards
          hostPath:
            path:  {{ .Values.hostPath }}/configuration/grafana
        - name: grafana-entrypoint
          configMap:
            name: grafana-entrypoint

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: core
spec:
  selector:
    app: grafana
  ports:
    - name: http
      protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30001
  type: NodePort

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-entrypoint
  namespace: core
data:
  entrypoint.sh: |-
    #!/bin/sh
    # set -euc

    mkdir -p /etc/grafana/provisioning/datasources
    cat <<EOF > /etc/grafana/provisioning/datasources/datasources.yaml
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      access: proxy
      orgId: 1
      url: http://loki.{{ .Values.Namespace }}.svc.cluster.local:{{ .Values.loki.port }}
      basicAuth: false
      isDefault: true
      version: 1
      editable: false
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus-server.default.svc.cluster.local:9090
      isDefault: false
      jsonData:
        timeInterval: "5s"
      editable: true
    - name: Jaeger
      type: jaeger
      access: proxy
      orgId: 1
      url: http://jaeger.linkerd-jaeger.svc.cluster.local:16686/jaeger/
      basicAuth: false
      isDefault: false
      version: 1
      editable: false
    EOF

    cat <<EOF > /etc/grafana/provisioning/dashboards/dashboards.yaml
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 300
      options:
        path: /etc/grafana/provisioning/dashboards
    EOF
    /run.sh
